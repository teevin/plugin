<?php
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require(APPPATH . '/libraries/REST_Controller.php');

// use namespace
use Restserver\Libraries\REST_Controller;
class Task extends REST_Controller{

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('task_model');
        $this->load->database();
        $this->load->helper('url');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->methods['users_put']['limit'] =50; //50 requests per hour per user/key
    }
     public function users_get()
    { 
       
            // Users from a data store e.g. database
            $users = $this->task_model->task_data();

            $id = $this->get('ids');

            // If the id parameter doesn't exist return all the users

            if ($id === NULL)
            {
                // Check if the users data store contains users (in case the database result returns NULL)
                if ($users)
                {
                    // Set the response and exit
                    $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
                }
                else
                {
                    // Set the response and exit
                    $this->response([
                        'status' => FALSE,
                        'message' => 'No users were found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
                }
            }

            // Find and return a single record for a particular user.
            else {
                $id = (int) $id;

                // Validate the id.
                if ($id <= 0)
                {
                    // Invalid id, set the response and exit.
                    $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
                }

                // Get the user from the array, using the id as key for retrieval.
                // Usually a model is to be used for this.

                $user = NULL;

                if (!empty($users))
                {
                    foreach ($users as $key => $value)
                    {
                        if (isset($value->user_id) && $value->user_id === $id)
                        {
                            $user = $value;
                        }
                    }
                }

                if (!empty($user))
                {
                    $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
                }
                else
                {
                    $this->set_response([
                        'status' => FALSE,
                        'message' => 'User could not be found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
                }
            }
      
    }

    public function users_post()
    {
        $rec=array('task_name'=>$this->post('task_name'),'task_dueDate'=>$this->post('task_dueDate'),'task_desc'=>$this->post('task_desc'),'user_id'=>$this->post('user_id'));
       //private function index_get(){
              //$rec = array('task_name' =>'complete models' ,'user_id' => 3,'task_desc' => 'complete controller and models asap and what ever','task_dueDate' => '15-01-2017' );
             // $recs = array('user_name' =>'test1' ,'user_surname' => 'foog test','user_email' => 'evin@evin.ctyty','user_password' => '1test ');
              $tbl='task';
              $message= $this->task_model->task_insert($rec,$tbl);
               //$msg = $_POST;
               /* $message = [
                    'id' => 100, // Automatically generated by the model
                    'name' => $this->post('name'),
                    'email' => $this->post('email'),
                    'message' => 'Added a resource'
                ];*/

                $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
          //  }
    }

    public function users_delete($id )
    {
       //function index_get(){
           // $id = (int) $this->get('id');

            // Validate the id.                                                  
            if ($id <= 0)
            {
                // Set the response and exit
                $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
            }
            $id= $this->delete('task_id');
            $tbl = 'task';
            $message = $this->task_model->task_del($id,'task');
            // $this->some_model->delete_something($id);
           /* $message = [
                'id' => $id,
                'message' => 'Deleted the resource'
            ];*/

            $this->set_response($message, REST_Controller::HTTP_OK); // NO_CONTENT (204) being the HTTP response code
        //}
    }
    public function users_put($id=7)
    {

    // function index_get()
      // {
        $arry =  $rec=array('task_name'=>$this->put('task_name'),'task_dueDate'=>$this->put('task_dueDate'),'task_desc'=>$this->put('task_desc'),'user_id'=>$this->put('user_id'));
        $rest= $this->task_model->task_update($this->put('task_id'),$arry);
         $this->set_response($rest, REST_Controller::HTTP_OK);
      // }
    }

}
